**Mermaid.js Flowchart Wizard – Development Guidelines**

---

#### 🎯 **Project Objective**

Build a modern, responsive web application using **Tailwind CSS** that enables users to:

1. **Input** a flowchart definition using **Mermaid.js syntax**
2. **Preview** the rendered diagram in real time
3. **Export & Share** the diagram as PNG or SVG

The app will follow a **3-step wizard** pattern:
`Step 1: Input → Step 2: Preview → Step 3: Export`

---

### 🧱 **Technology Stack**

* **Frontend**: HTML, JavaScript (Vanilla or Alpine.js if needed), Tailwind CSS
* **Diagram Engine**: [Mermaid.js](https://mermaid-js.github.io/)
* **Export Tools**:

  * For SVG: Native export from `mermaid`
  * For PNG: Use libraries like `html-to-image`, `dom-to-image`, or `canvg`
* **Editor**: Simple `<textarea>` or optionally `CodeMirror`/`Monaco` for enhanced UX

---

### 📁 **Project Structure**

```bash
mermaid-wizard/
├── index.html
├── /assets
│   ├── styles.css
│   └── logo.svg
├── /js
│   ├── app.js
│   ├── mermaid-preview.js
│   └── export-utils.js
└── /lib
    └── mermaid.min.js
```

---

### 🎨 **UI/UX Structure (3-Step Wizard)**

1. **Step 1: Input Mermaid Code**

   * Textarea (or code editor) for Mermaid syntax input.
   * “Next” button to preview.

2. **Step 2: Preview Diagram**

   * Render Mermaid diagram in a `<div id="mermaid-preview">`.
   * “Back” to edit, “Next” to export.

3. **Step 3: Export / Share**

   * Options to download as **PNG** or **SVG**.
   * Buttons: “Back”, “Copy Link”, “Download Image”.

#### 🪄 UI Components (Tailwind Guidelines)

* Rounded corners (`rounded-2xl`)
* Shadow (`shadow-md` or `shadow-lg`)
* Utility-first layout (`grid`, `flex`, `space-y-*`)
* Responsive by default (`sm:`, `md:`, `lg:` breakpoints)
* Light and dark themes optional

---

### ⚙️ **Functional Requirements**

* **Live Preview**: After input, parse and render using `mermaid.render()`
* **Safe Rendering**: Sanitize input or catch Mermaid parsing errors
* **Image Export**:

  * Rendered SVG can be directly downloaded
  * PNG generated by converting SVG/DOM using canvas
* **Shareable Output** (optional):

  * Store Mermaid code in URL hash or base64 param
  * On page load, decode and pre-fill editor

---

### 🧪 **Testing Checklist**

* [ ] Handle large or invalid Mermaid definitions
* [ ] Cross-browser compatibility: Chrome, Firefox, Safari
* [ ] Export buttons functional on all platforms
* [ ] Ensure image quality on high DPI screens

---

### 🛡 **Security & Accessibility**

* Sanitize Mermaid input to avoid script injection
* Use proper `aria-*` attributes for navigation buttons
* Ensure keyboard accessibility for editor and steps

---

### 🚧 **Before Deployment**

* [ ] Optimize bundle size (remove unused Tailwind classes)
* [ ] Add favicon and meta tags
* [ ] Ensure Mermaid JS loads in offline mode
* [ ] Provide a few predefined templates/examples
